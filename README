                SiRFIDaL - Simple RFID authentication for Linux
                -----------------------------------------------


This is a set of utilities to use RFID or NFC transponder UIDs as authentication
tokens on a Linux computer - typically for login purposes.


/!\ WARNING: do not use the PAM module as a single form of authentication    /!\
/!\          without an additional mandatory password-based authentication   /!\
/!\          on a computer onto which users are allowed to login remotely!   /!\
/!\                                                                          /!\
/!\          If you do, bad things can happen, such as a remote user doing   /!\
/!\          su while the right RFID or NFC transponder is on a reader and   /!\
/!\          becoming you or root without any checks, unbeknown to you!      /!\
/!\                                                                          /!\
/!\          Only use it for 1FA login on a computer with a single local     /!\
/!\          console and no SSH server, VNC server, remote X or any other    /!\
/!\          kinds of remote login enabled - i.e. a workstation.             /!\
/!\                                                                          /!\
/!\                          !YOU HAVE BEEN WARNED!                          /!\


The utilities included are:

- sirfidal_server                    Core program used by all the others.
                                     It manages RFID or NFC readers and
                                     authenticates users against RFID / NFC
                                     UIDs on behalf of other programs.

- sirfidal_pam                       PAM module that uses the SiRFIDaL server to
                                     authenticate users against RFID or NFC
                                     UIDs, typcally to login.

- sirfidal_useradm                   Utility to add or delete users allowed to
                                     authenticate with RFID / NFC UIDs.

- sirfidal_beep                      Program to beep when a RFID or NFC
                                     transponder is read by a reader, or taken
                                     off the reader.

- sirfidal_autolockscreen            Program to lock/unlock a graphical
                                     interface screensaver automatically using
                                     authenticated RFID or NFC transponders.

- sirfidal_autotype                  Program to automatically type custom
                                     strings in predefined X application
                                     windows (passwords for example) upon
                                     authenticating with a RFID or NFC
                                     transponder.

- sirfidal_keyboard_wedge            Program to emulate a RFID / NFC keyboard
                                     wedge reader, by typing out the UIDs read
                                     by the SiRFIDaL server as if they came
                                     from a keyboard. This utility must be run
                                     as root.

- sirfidal_getuids                   Continuously displays new UIDs being read
                                     by the SiRFIDaL server. This utility must
                                     be run as root, as the SiRFIDaL server will
                                     not expose actual UIDs to non-root users.

- sirfidal_auto_send_enter_at_login  Utility that uses sirfidal_getuids to
                                     automatically type ENTER in a console or
                                     graphical login screen when a RFID / NFC
                                     transponder is read by the SiRFIDaL server,
                                     to avoid having to type an empty password
                                     when using pam_unix and sirfidal_pam
                                     together in the same PAM configuration.



Installation / configuration instructions for the busy man
----------------------------------------------------------

The following are instructions to install the utilities on Linux Mint, which is
based on Ubuntu, and running systemd and the Cinnamon environment.

If your Linux system isn't Linux Mint, please modify the *.py Python scripts,
*.service systemd service files and sirfidal_pam.config PAM configuration files
accordingly. See the comments in the Python scrips for details and available
configurable parameters.



Installation:

  As root:

    * Common:

      apt-get install python3
      apt-get install python3-filelock
      apt-get install python3-psutil

      cp *.py /usr/local/bin
      cp *.service /lib/systemd/system
      cp sirfidal_pam.config /usr/share/pam-configs
      mkdir -p /usr/local/share/sounds/sirfidal
      cp sounds/* /usr/local/share/sounds/sirfidal

    * Additional to use PC/SC readers:

      apt-get install pcscd pcsc-tools python3-pyscard

      - Configure PC/SC for your readers. If pcsc_scan works, SiRFIDaL will
        work also. See https://pcsclite.apdu.fr/

    * Additional to use serial readers or Chameleon devices:

      apt-get install python3-serial

    * Additional to use NFC-enabled Android devices as readers:

      apt-get install adb

      - Configure your Android device following the instructions below

      - When connecting your Android device to the computer running the
        SiRFIDaL server for the first time, it will ask you if you want to
        allow USB debugging: check "Always allow from this computer" and
        tap Ok.

    * Additional to use HID readers:

      apt-get install python3-evdev

    * Additional to use uFR readers:

      git clone https://github.com/Giraut/pyuFR

      - Copy pyufr.py in /usr/lib/python3/dist-packages/

    * Additional to use sirfidal_autotype.py:

      apt-get install python3-cryptography
      apt-get install python3-xdo
          -or-
      python3 -m pip install pynput

    * Additional to use sirfidal_auto_send_enter_at_login.py:

      apt-get install python3-xlib

    * Additional to use sirfical_beep.py:

      apt-get install sox



Server configuration:

  As root:

    All the configuration options are located inside the sirfidal_server.py
    file itself. However, you can override any of the settings with settings
    similarly declared in a separate /etc/sirfical_server_parameters.py.

    * Readers declararion:

      All the readers the server should read UIDs from are declared in the
      "readers" dictionary. The default values are reasonable / sample values
      for one of each type of reader supported by the SiRFIDaL server.

      You may declare several of the same type of reader. Simply reuse the same
      type and parameters in a new section with a new reader name.
      For example, it you want to use 2 serial readers with different baudrates:

      ...
      "serial_reader_#1":   {
        "enabled":          True,
        "type":             "serial",
        "uids_timeout":     1, #s
        "device":           "/dev/ttyUSB0",
        "baudrate":         9600,
        "bytesize":         8,
        "parity":           "N",
        "stopbits":         1
      },

      "serial_reader_#2":   {
        "enabled":          True,
        "type":             "serial",
        "uids_timeout":     1, #s
        "device":           "/dev/ttyUSB1",
        "baudrate":         115200,
        "bytesize":         8,
        "parity":           "N",
        "stopbits":         1
      },
      ...

    * Configuration options common to all types of readers:

      - enabled:        If set to True, the reader is enabled. If set to False,
                        the rest of the declaration is ignored.
      - type:           Type of reader
      - uids_timeout:   If set to a value in seconds, the UIDs read by that
                        reader exist in the server as active UIDs for that
                        number of seconds, then time out unless the reader
                        re-reads them before they time out. In the case of
                        repeating readers that send the same UIDs repeatedly,
                        this maintains the UIDs active as long as the
                        transponders are read. In the case of one-shot readers,
                        this maintains the UIDs active for the duration of the
                        timeout only.
                        If set to None, the UIDs sent by the reader never time
                        out.  The reader or the SiRFIDaL reader listener must
                        actively inform the server when the UIDs become
                        inactive. The reader is said to be persistent.

    * Configuration options for USB PC/SC readers:

      - poll_every:     Delay in seconds between reader polls

    * Configuration options for serial readers:

      - device:         Serial device file
      - baudate:        Serial communication speed
      - bytesize:       7 or 8 bits
      - parity:         "N" for none, "E" for even, "O" for odd, "M" for mark,
                        "S" for space
      - stopbits:       1, 1.5 or 2

    * Configuration options for HID readers - aka keyboard wedges:

      - device:         HID input device file

    * Configuration options for Android devices used as NFC readers:

      - client:         Full path to the ADB client executable
      - logcat_prefix:  Prefix used to spot UIDs reported by the Android Tasker
                        script (see below). This shouldn't have to be changed
                        unless the prefix is changed in the Tasker script
                        accordingly.

    * Configuration options for Proxmark3 devices used as NFC or RFID readers:

      - device:         Serial device file of the Proxmark3
      . client:         Full path to the Proxmark3 client executable
      - client_workdir: Working directory in which to run the Proxmark3 client,
                        where it will try to log things to a fake proxmark3.log
                        that is in fact a symlink to /dev/null
      - client_timeout: How long the Proxmark3 client may stay silent before
                        it's considered crashed and restarted
      - read_iso14443a:	If set to True, read ISO 14443A transponder UIDs (HF)
      - read_iso15693:	If set to True, read ISO 15693 transponder UIDs (HF)
      - read_em410x:	If set to True, read EM410x transponder UIDs (LF)
      - read_indala:	If set to True, read HID Indala transponder UIDs (LF)
      - read_fdx:       If set to True, read FDX-B transponder UIDs (LF)

        Note: The above transponder type flags may be combined. However, note
              that the more types you combine, the less responsive the
              Proxmark3 will becomes. Additionally, if you combine HF and LF
              transponders, the Proxmark3's FPGA will be reprogrammed at each
              polling cycle to switch back and forth from HF to LF, which is
              not only very slow, but also quite harmful for the FPGA.
              It is highly recommended to stick to HF or LF transponders.

    * Configuration options for Chameleon Mini / Tiny devices:

      - device:         Serial device file of the Chameleon device

    * Configuration options for uFR or uFR Nano Online in slave mode:

      - device:         Unified pyuFR-style device specification
      - poll_every:     If set to a value in second, the uFR reader is driven
                        in polled mode, and the value is the delay between
                        polls. If set to None, the uFR reader is driven in
                        asynchronous mode.
      - poll_powersave: If the uFR device is driven in polled mode, put the
                        reader to sleep between polls, to reduce energy usage
      - debounce_delay: Delay before reporting no active UID to the server in
                        asynchronous mode. This prevents the active UID
                        flitting on and off at high speed if the transponder
                        doesn't couple quite well enough with the reader if it
                        leaves the field too slowly, due to the very fast
                        nature of asynchronous scanning.
      - no_rgb1:	Color to set the uFR Nano Online-specific RGB LED #1 to,
                        or None
      - no_rgb2_on:	Color to set the uFR Nano Online-specific RGB LED #2 to
                        when a transponder is in the field, or None
      - no_rgb2_off:	Color to set the uFR Nano Online-specific RGB LED #2 to
                        when no transponder is in the field, or None
      - conn_watchdog:  How many seconds of silence before the connection to
                        the uFR reader is rechecked in asynchronous mode

    * Configuration options for the HTTP server for networked readers sending
      UIDs using the HTTP GET or POST methods:

      - bind_address:   Address (interface) to bind the server to
      - bind_port:      Port to bind the server to
      - get_data_fmt:   Regular expression used to extract UIDs from
                        GET request data, or None to disable the GET method
      - get_reply:      Fixed string to send to the client after it sends a
                        UID using the GET method
      - post_data_fmt:  Regular expression used to extract UIDs from
                        POST data, or None to disable the POST method
      - post_reply:     Fixed string to send to the client after it sends a
                        UID using the POST method

    * TCP client to get UIDs from a reader running a TCP server

      - server_address: Address of the reader
      - server_port:    Port of the reader
      - tcp_keepalive:  How many seconds of silence before the TCP connection
                        is rechecked by sending something to the reader,
                        or None to disable

    * Enable and start the SiRFIDaL server's systemd services:

      systemctl enable sirfidal_server
      systemctl start sirfidal_server



Optional systemd services:

  As root:

    * Enabling and starting the SiRFIDaL beep service:

      systemctl enable sirfidal_beep
      systemctl start sirfidal_beep

    * Enabling and starting the SiRFIDaL keyboard wedge simulation service:

      systemctl enable sirfidal_keyboard_wedge
      systemctl start sirfidal_keyboard_wedge

    * Enabling and starting the SiRFIDaL *auto send ENTER at login" service:

      systemctl enable sirfidal_auto_send_enter_at_login
      systemctl start sirfidal_auto_send_enter_at_login



PAM configuration:

  As root:

    * Configure PAM for single factor authentication (password or RFID / NFC):

      - Edit /usr/share/pam-configs/unix and add "nodelay" after "pam_unix.so"
        in the Auth sections

    * Configure PAM for two-factor authentication (password and RFID / NFC):

      - Edit /usr/share/pam-configs/unix and replace
        "success=end default=ignore" with "success=ok" in the Auth sections

    * Finalize the PAM configuration

      pam-auth-update



Optional user utilities configuration:

  As user:

    * Running the automatic screensaver locker / unlocker:

      - In Preferences > Startup Applications, click on + > Custom command
      - Enter the name "RFID NFC lock unlock screen" (or whatever you want)
      - Enter the command "/usr/local/bin/sirfidal_autolockscreen.py"
      - Click Add
      - Select the entry and click on the gears icon to run it now

    * Running the autotyper:

      - In Preferences > Startup Applications, click on + > Custom command
      - Enter the name "RFID NFC autotype" (or whatever you want)
      - Enter the command "/usr/local/bin/sirfidal_autotype.py"
      - Click Add
      - Select the entry and click on the gears icon to run it now
      - In a terminal, run "sirfidal_autotype -w <string> [-n]" to configure a
        string to send to a particular window



Configuring an Android device as an external NFC reader for SiRFIDaL:

  * In Settings > System, enable Developer options and USB debugging:
    https://developer.android.com/studio/debug/dev-options

  * Install Tasker:
    https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm

  * In Preferences > Monitor, tap the NFC Detection Enabled check box

  * Install the script in tasker:

    - File import method:

      . Copy the sirfidal_tasker_script.xml file to your Android device
      . In the Profiles tab, tap Profiles then select Import Profile
      . Select the storage location you copied the file to then select the file
      . In the main screen, tap the tick mark to save everything

    - Entering the script manually if the import fails:

      . In the Profiles tab, tap +
      . Select Event > Net > NFC Tag
      . In the Event Edit screen, tap <-
      . Select New Task and tap the tick mark
      . In the Task Edit window, tap +, then select Net > NFC Tag
      . in the Action Edit screen, Leave everything blank and tap <-
      . In the Task Edit window, tap + again, then select Code > Run Shell
      . In the Action Edit screen, enter the line below in the Command field:

        log nfcuid:%nfc_id

        then tap <-
      . In the Task Edit window, tap <-
      . In the main screen, tap the tick mark to save everything



Note regarding persistence in Android devices:

  To provide persistent mode with an Android device used as an external NFC
  reader - i.e. to emulate a PC/SC reader or a repeating serial device, that
  continuously reports whether a transponder is on the device - SiRFIDaL abuses
  the Android system log and uses it to catch "tag off" debug events.

  This is a bit dirty however, and it may not always work, as Google may modify
  or remove that particular logging without notice at any time. If the feature
  fails to work properly, the symptom is SiRFIDaL "seeing" a transponder getting
  read, but failing to see it leave the reader.

  If you experience that problem, you can disable persistent mode by changing
  uids_timeout from None to some value in seconds (for example 1) so that active
  UIDs read by the Tasker script time out on their own. When persistent mode is
  disabled, the Android device still works as an external NFC reader, but
  degrades to the equivalent of a keyboard wedge or non-repeating serial reader.



           ---------------------------------------------------------
                   Bug reports? Questions? You can email me.
                   Run this command to get my email address:
           C=base64\ -d;$C<<<Y205emEybHpRSEoxYm1KdmVDNWpiMjBLCg==|$C
           ---------------------------------------------------------
