                SiRFIDaL - Simple RFID authentication for Linux
                -----------------------------------------------


This is a set of utilities to use RFID or NFC transponder UIDs as authentication
tokens on a Linux computer - typically for login purposes.


/!\ WARNING: do not use the PAM module as a single form of authentication    /!\
/!\          without an additional mandatory password-based authentication   /!\
/!\          on a computer onto which users are allowed to login remotely!   /!\
/!\                                                                          /!\
/!\          If you do, bad things can happen, such as a remote user doing   /!\
/!\          su while the right RFID or NFC transponder is on a reader and   /!\
/!\          becoming you or root without any checks, unbeknown to you!      /!\
/!\                                                                          /!\
/!\          Only use it for 1FA login on a computer with a single local     /!\
/!\          console and no SSH server, VNC server, remote X or any other    /!\
/!\          kinds of remote login enabled - i.e. a workstation.             /!\
/!\                                                                          /!\
/!\                          !YOU HAVE BEEN WARNED!                          /!\


The utilities included are:

- sirfidal_server                    Core program used by all the others.
                                     It manages RFID or NFC readers and
                                     authenticates users against RFID / NFC
                                     UIDs on behalf of other programs.

- sirfidal_pam                       PAM module that uses the SiRFIDaL server to
                                     authenticate users against RFID or NFC
                                     UIDs, typcally to login.

- sirfidal_useradm                   Utility to add or delete users allowed to
                                     authenticate with RFID / NFC UIDs.

- sirfidal_beep                      Program to beep when a RFID or NFC
                                     transponder is read by a reader, or taken
                                     off the reader.

- sirfidal_autolockscreen            Program to lock/unlock a graphical
                                     interface screensaver automatically using
                                     authenticated RFID or NFC transponders.

- sirfidal_autotype                  Program to automatically type custom
                                     strings in predefined X application
                                     windows (passwords for example) upon
                                     authenticating with a RFID or NFC
                                     transponder.

- sirfidal_keyboard_wedge            Program to emulate a RFID / NFC keyboard
                                     wedge reader, by typing out the UIDs read
                                     by the SiRFIDaL server as if they came
                                     from a keyboard. This utility must be run
                                     as root.

- sirfidal_getuids                   Continuously displays new UIDs being read
                                     by the SiRFIDaL server. This utility must
                                     be run as root, as the SiRFIDaL server will
                                     not expose actual UIDs to non-root users.

- sirfidal_auto_send_enter_at_login  Utility that uses sirfidal_getuids to
                                     automatically type ENTER in a console or
                                     graphical login screen when a RFID / NFC
                                     transponder is read by the SiRFIDaL server,
                                     to avoid having to type an empty password
                                     when using pam_unix and sirfidal_pam
                                     together in the same PAM configuration.



Installation instructions for the busy man
------------------------------------------

These are instructions to install the utilities on Linux Mint, which is based
on Ubuntu, and running systemd and the Cinnamon environment.

If your Linux system isn't Linux Mint, please modify the *.py Python scripts,
*.service systemd service files and sirfidal_pam.config PAM configuration files
accordingly. See the comments in the Python scrips for details and available
configurable parameters.

As root:

  * Prerequisites:

    * Python3 installation:

       apt-get install python3

    * Use with PC/SC readers:

       apt-get install pcscd pcsc-tools
       - Configure PC/SC for your readers. If pcsc_scan works, SiRFIDaL will
         work also. See https://pcsclite.apdu.fr/
       - Make sure watch_pcsc is set to True in sirfidal_server.py

    * Use with a serial reader:

       - Set serial_reader_dev_file to the device file corresponding to your
         reader in sirfidal_server.py
       - Make sure watch_serial is set to True in sirfidal_server.py

    * Use with a HID reader [See Limitation below]:

       - Set hid_reader_dev_file to the device file corresponding to your
         reader in sirfidal_server.py
       - Make sure watch_hid is set to True in sirfidal_server.py

    * Use with an NFC-enabled Android device as a reader [See Android note]:

       apt-get install adb
       - Configure your Android device following the instructions below
       - Make sure watch_adb is set to True in sirfidal_server.py
       - When connecting your Android device to the computer running the
         SiRFIDaL server for the first time, it will ask you if you want to
         allow USB debugging: check "Always allow from this computer" and
         tap Ok.

    * Use with a Proxmark3 reader:

       - Set pm3_client to the path of your Proxmark3 client's executable in
         sirfidal_server.py
       - Set pm3_reader_dev_file to the device file corresponding to your
         Proxmark3 in sirfidal_server.py
       - Enable of disable the different types of transponders you want to be
         able to read with the pm3_read_* lines. Several types of transponders
         may be enabled at the same time, but be aware that if you mix LF and HF
         transponders, the reader will be extremely slow. For best performances,
         enable only HF transponders or only LF transponders, but not both.
       - Make sure watch_pm3 is set to True in sirfidal_server.py

    * Use with a ChameleonMini or ChameleonTiny:

       - Set chameleon_dev_file to the device file corresponding to your
         ChameleonMini or ChameleonTiny in sirfidal_server.py
       - Set the slot (setting) number you want to reserve for use as a reader
         in chameleon_iso14443a_reader_slot in sirfidal_server.py. Be sure not
         to use this slot for something else when you use your Chameleon as a
         standalone device, as SiRFIDaL will automatically reconfigure it upon
         connection and clobber your manual configuration.
       - Make sure watch_chameleon is set to True in sirfidal_server.py

    * Use with a uFR Nano Online in master mode with HTTP POST mode enabled:

       - Configure your uFR Nano Online to connect to the same Wifi router
         the computer the SiRFIDaL server is running on is connected to. See
         https://www.d-logic.net/knowledge-base/Âµfr-nano-online-reader-settings/

         WARNING: because the uFR Nano Online sends UIDs in plaintext over HTTP,
                  it relies entirely on the Wifi connection's encryption for
                  security against network sniffers. Don't use it to log in
                  over an insecure network or across the internet!

       - Set the address / port the SiRFIDaL server should listen on for
         incoming HTTP connections in sirfidal_server.py. Unless you want the
         server to listen only on a particular network interface, the address
         may be left blank.
       - Set ufrno_enable_beep to True in sirfidal_server.py if you want the
         uFR Nano Online to beep after reading a UID (with some delay).
         Be aware that due to a bug in the reader's firmware, if you disable
         this flag later, the reader will continue beeping until you reboot it.
       - Make sure watch_ufrno is set to True in sirfidal_server.py


    * Python3 modules needed:

      apt-get install python3-pyscard       # Needed to use PC/SC readers
      apt-get install python3-evdev         # Needed to use a HID reader
      apt-get install python3-serial        # Needed to use a serial reader
      apt-get install python3-filelock
      apt-get install python3-psutil
      apt-get install python3-cryptography  # Needed by sirfidal_autotype
      apt-get install python3-xdo           # Needed by sirfidal_autotype and
                                            # sirfidal_auto_send_enter_at_login

    * Optional external programs

      apt-get install sox          # Needed by sirfidal_beep
      apt-get install wmctrl       # Needed by sirfidal_auto_send_enter_at_login

  * Copy the files:

    cp *.py /usr/local/bin
    cp *.service files /lib/systemd/system
    cp sirfidal_pam.config /usr/share/pam-configs
    mkdir -p /usr/local/share/sounds/sirfidal
    cp sounds/* /usr/local/share/sounds/sirfidal

  * Enable and start the systemd services:

    systemctl enable sirfidal_server
    systemctl start sirfidal_server

    systemctl enable sirfidal_beep                      # Optional
    systemctl start sirfidal_beep                       # Optional

    systemctl enable sirfidal_keyboard_wedge            # Optional
    systemctl start sirfidal_keyboard_wedge             # Optional

    systemctl enable sirfidal_keyboard_wedge            # Optional
    systemctl start sirfidal_keyboard_wedge             # Optional

    systemctl enable sirfidal_auto_send_enter_at_login  # Optional
    systemctl start sirfidal_auto_send_enter_at_login   # Optional

  * Configure PAM for single factor authentication (password or RFID / NFC):

    - Edit /usr/share/pam-configs/unix and add "nodelay" after "pam_unix.so"
      in the Auth sections

  * Configure PAM for two-factor authentication (password and RFID / NFC):

    - Edit /usr/share/pam-configs/unix and replace "success=end default=ignore"
      with "success=ok" in the Auth sections

  * Finalize PAM configuration

    pam-auth-update

As a user:

  * Run the automatic screensaver locker / unlocker [Optional]:

    - In Preferences > Startup Applications, click on + > Custom command
    - Enter the name "RFID NFC lock unlock screen" (or whatever you want)
    - Enter the command "/usr/local/bin/sirfidal_autolockscreen.py"
    - Click Add
    - Select the entry and click on the gears icon to run it now

  * Run the autotyper [Optional]:

    - In Preferences > Startup Applications, click on + > Custom command
    - Enter the name "RFID NFC autotype" (or whatever you want)
    - Enter the command "/usr/local/bin/sirfidal_autotype.py"
    - Click Add
    - Select the entry and click on the gears icon to run it now
    - In a terminal, run "sirfidal_autotype -w <string> [-n]" to configure a
      string to send to a particular window



Configuring an Android device as an external NFC reader for SiRFIDaL
--------------------------------------------------------------------

  * In Settings > System, enable Developer options and USB debugging:
    https://developer.android.com/studio/debug/dev-options 

  * Install Tasker:
    https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm

  * In Preferences > Monitor, tap the NFC Detection Enabled check box

  * Install the script in tasker:

    - File import method:

      . Copy the sirfidal_tasker_script.xml file to your Android device
      . In the Profiles tab, tap Profiles then select Import Profile
      . Select the storage location you copied the file to then select the file
      . In the main screen, tap the tick mark to save everything

    - Entering the script manually if the import fails:

      . In the Profiles tab, tap +
      . Select Event > Net > NFC Tag
      . In the Event Edit screen, tap <-
      . Select New Task and tap the tick mark
      . In the Task Edit window, tap +, then select Net > NFC Tag
      . in the Action Edit screen, Leave everything blank and tap <-
      . In the Task Edit window, tap + again, then select Code > Run Shell
      . In the Action Edit screen, enter the line below in the Command field:

        log nfcuid:%nfc_id

        then tap <-
      . In the Task Edit window, tap <-
      . In the main screen, tap the tick mark to save everything
      


Limitation when using a one-shot reader
------------------------------------------

HID readers - also called "keyboard wedges" - are one-shot instead of
repeating devices. This means they send the UID of a transponder they've read
only once, then stay quiet until a new read is performed.

That's because they're made to emulate keyboards, to automatically enter UIDs
in a word processor or a spreadsheet. Obviously you don't want the reader to
fill up your document with identical UIDs.

Likewise, the ChameleonMini, ChameleonTiny, the uFR Nano Online and many serial
readers are one-shot readers and send the UIDs they read only once until the
transponder is removed from the field and a new one is read. Those readers are
made primarily for single-shot rather than continuous authentication.

As a result, with those readers, it's impossible to detect the presence of a
transponder continuously. SiRFIDaL emulates a repeating device by pretending
the transponder stays on the reader for a short period, then leaves the reader.

This emulation is sufficient for single-shot authentication. However, it
breaks SiRFIDaL clients that rely on continuously probing active UIDs: for
instance, sirfidal_autolockscreen won't work properly in persistent mode, and
sirfidal_beep will play a "down" beep while the transponder is still on the
reader.



Android note regarding persistent mode emulation
------------------------------------------------

To provide persistent mode with an Android device used as an external NFC
reader - i.e. to emulate a PC/SC reader or a repeating serial device, that
continuously reports whether a transponder is on the device - SiRFIDaL abuses
the Android system log, and uses it to catch "tag off" debug events.

This is a bit dirty however, and it may not always work, as Google may modify
or remove that particular logging without notice at any time. If the feature
fails to work properly, the symptom is SiRFIDaL "seeing" a transponder getting
read, but failing to see it leave the reader.

If you experience that problem, you can disable persistent mode by setting
adb_persistent_mode to False in sirfidal_server.py. When persistent mode is
disabled, the Android device still works as an external NFC reader, but
degrades to the equivalent of a keyboard wedge (see above).



           ---------------------------------------------------------
                   Bug reports? Questions? You can email me.
                   Run this command to get my email address:
           C=base64\ -d;$C<<<Y205emEybHpRSEoxYm1KdmVDNWpiMjBLCg==|$C
           ---------------------------------------------------------
